.\" Copyright 2014 Garrett D'Amore <garrett@damore.org>
.\" Copyright 1989 AT&T  Copyright (c) 2001, Sun Microsystems, Inc.  All Rights Reserved  Portions Copyright (c) 1992, X/Open Company Limited  All Rights Reserved
.\" Sun Microsystems, Inc. gratefully acknowledges The Open Group for permission to reproduce portions of its copyrighted documentation. Original documentation from The Open Group can be obtained online at
.\" http://www.opengroup.org/bookstore/.
.\" The Institute of Electrical and Electronics Engineers and The Open Group, have given us permission to reprint portions of their documentation. In the following statement, the phrase "this text" refers to portions of the system documentation. Portions of this text are reprinted and reproduced in electronic form in the Sun OS Reference Manual, from IEEE Std 1003.1, 2004 Edition, Standard for Information Technology -- Portable Operating System Interface (POSIX), The Open Group Base Specifications Issue 6, Copyright (C) 2001-2004 by the Institute of Electrical and Electronics Engineers, Inc and The Open Group. In the event of any discrepancy between these versions and the original IEEE and The Open Group Standard, the original IEEE and The Open Group Standard is the referee document. The original Standard can be obtained online at http://www.opengroup.org/unix/online.html.
.\"  This notice shall appear on any product containing this material.
.\" The contents of this file are subject to the terms of the Common Development and Distribution License (the "License").  You may not use this file except in compliance with the License.
.\" You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE or http://www.opensolaris.org/os/licensing.  See the License for the specific language governing permissions and limitations under the License.
.\" When distributing Covered Code, include this CDDL HEADER in each file and include the License file at usr/src/OPENSOLARIS.LICENSE.  If applicable, add the following below this CDDL HEADER, with the fields enclosed by brackets "[]" replaced with your own identifying information: Portions Copyright [yyyy] [name of copyright owner]
.Dd Aug 20, 2014
.Dt GETCONTEXT 2
.Os
.Sh NAME
.Nm getcontext, setcontext
.Nd get and set current user context
.Sh SYNOPSIS
.In ucontext.h
.Ft int
.Fn getcontext "ucontext_t *ucp"
.Ft int
.Fn setcontext "const ucontext_t *ucp"
.Sh DESCRIPTION
The
.Fn getcontext
function initializes the structure pointed to by
.Fa ucp
to the current user context of the calling process.  The
.Fa ucontext_t
type that
.Fa ucp
points to defines the user context and
includes the contents of the calling process' machine registers, the signal
mask, and the current execution stack.
.Lp
The
.Fn setcontext
function restores the user context pointed to by
.Fa ucp .
A successful call to
.Fn setcontext
does not return; program
execution resumes at the point specified by the
.Fa ucp
argument passed to
.Fn setcontext .
The
.Fa ucp
argument should be created either by a prior
call to
.Fn getcontext ,
or by being passed as an argument to a signal
handler.
.Lp
If the
.Fa ucp
argument was created with
.Fn getcontext ,
program execution continues as if the corresponding call of
.Fn getcontext
had just returned.
.Lp
If the
.Fa ucp
argument was created with
.Xr makecontext 3C ,
program execution continues with the function passed to
.Xr makecontext 3C .
When that function returns, the process continues as if after a call to
.Fn setcontext
with the
.Fa ucp
argument that was input to
.Xr makecontext 3C .
.Lp
If the
.Fa ucp
argument was passed to a signal
handler, program execution continues with the program instruction following the
instruction interrupted by the signal.
.Lp
If the
.Fa uc_link
member of the
.Ft ucontext_t
structure pointed to by the
.Fa ucp
argument is equal to 0,
then this context is the main context, and the process will exit when this
context returns.  The effects of passing a
.Fa ucp
argument obtained from any other source are unspecified.
.Sh RETURN VALUES
On successful completion,
.Fn setcontext
does not return and
.Fn getcontext()
returns 0. Otherwise, -1 is returned.
.Sh ERRORS
No errors are defined.
.Sh USAGE
When a signal handler is executed, the current user context is saved and a new
context is created.  If the thread leaves the signal handler via
.Xr longjmp 3C ,
then it is unspecified whether the context at the time of
the corresponding
.Xr setjmp 3C
call is restored and thus whether future
calls to
.Fn getcontext
will provide an accurate representation of the
current context, since the context restored by
.Xr longjmp 3C
may not contain all the information that
.Fn setcontext
requires.  Signal handlers
should use
.Xr siglongjmp 3C
instead.
.Lp
Portable applications should not modify or access the
.Fa uc_mcontext
member
of
.Ft ucontext_t .
A portable application cannot assume that context
includes any process-wide static data, possibly including
.Va errno .
Users manipulating contexts should take care to handle these explicitly when
required.
.Lp
Portable applications should make use of the
.Xr pthreads 5
routines for co-processing instead of these routines.
.Sh INTERFACE STABILITY
.Sy Obsolete Standard .
.Sh SEE ALSO
.Xr sigaction 2 ,
.Xr sigaltstack 2 ,
.Xr sigprocmask 2 ,
.Xr bsd_signal 3C ,
.Xr makecontext 3C ,
.Xr setjmp 3C ,
.Xr sigsetjmp 3C ,
.Xr ucontext.h 3HEAD ,
.Xr pthreads 5 ,
.Xr standards 5
.Sh STANDARDS
These functions are available in the following compilation environments.  See
.Xr standards 5 .
.Lp
.Bl -bullet -compact
.It
.St -xpg4.2
.It
.St -susv2
.It
.St -susv3
.El
.Lp
These functions were obsoleted in
.St -susv3
and subsequently removed in
.St -p1003.1-2008 .
